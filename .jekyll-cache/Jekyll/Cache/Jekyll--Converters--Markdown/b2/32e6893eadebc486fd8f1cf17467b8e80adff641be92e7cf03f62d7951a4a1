I"˜:<h1 id="code-katas-serie-karate-chop">[Code katas Serie] Karate Chop.</h1>

<p>I have been curious to try and implement a <a href="http://codekatas.org/about.aspx">code kata</a> just to see how valuable it is.</p>

<h2 id="what-is-it-">What is it ?</h2>

<p>It is all about reinventing the wheel, as fast as you can. You are meant to implement a well-known problem or game and repeat it until you are fast and satisfied enough of the solution. The Karate Chop for example is no more, no less than the infamous <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search algorithm</a>. It comes with a simple spec file, here :</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_chop</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span>  <span class="nb">chop</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
  <span class="n">assert_equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">chop</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="here-is-my-go">Here is my go</h2>

<p><a href="https://vimeo.com/76784295">Second implementation</a> fast forwarded 2 times. 
Outputs:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Karate</span> 

  <span class="k">def</span> <span class="nf">chop</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">values</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="n">values</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">values</span><span class="p">.</span><span class="nf">size</span> <span class="o">==</span> <span class="mi">1</span>

    <span class="n">reduce_values</span> <span class="o">=</span> <span class="n">values</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
    <span class="n">chopped_reduced</span> <span class="o">=</span> <span class="nb">chop</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">reduce_values</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">chopped_reduced</span>  <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">?</span>
      <span class="o">-</span><span class="mi">1</span> <span class="p">:</span>
      <span class="n">values</span><span class="p">.</span><span class="nf">reduce_index</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="o">+</span> <span class="n">chopped_reduced</span> 
  <span class="k">end</span>

<span class="kp">private</span>
  
  <span class="no">Array</span><span class="p">.</span><span class="nf">class_eval</span> <span class="k">do</span>
    <span class="k">def</span> <span class="nf">median</span> 
      <span class="n">median_index</span> <span class="o">=</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="no">ArrayElement</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">median_index</span><span class="p">,</span> <span class="nb">self</span><span class="p">[</span><span class="n">median_index</span><span class="p">])</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
      <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">median</span><span class="p">.</span><span class="nf">value</span> <span class="p">?</span>
        <span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="n">median</span><span class="p">.</span><span class="nf">index</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">slice</span><span class="p">(</span><span class="n">median</span><span class="p">.</span><span class="nf">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">..-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">reduce_index</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
      <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">median</span><span class="p">.</span><span class="nf">value</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="n">median</span><span class="p">.</span><span class="nf">index</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">ArrayElement</span> <span class="o">&lt;</span>  <span class="no">Struct</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:value</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>


<span class="c1">#$ 1 runs, 19 assertions, 0 failures, 0 errors, 0 skips</span>
</code></pre></div></div>

<h2 id="thoughts">Thoughts</h2>

<p>Interesting exercice, not really common to repeat the same kind of algorithms with an intended short delay.
Repeating, even only twice, unveils improvements to the solution.
A third implementation would use a new Poro with a reference on the values instead of a nasty <code class="language-plaintext highlighter-rouge">class_eval</code> on <code class="language-plaintext highlighter-rouge">Array</code>.
Something like</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">BinarySearch</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
        <span class="vi">@array</span> <span class="o">=</span> <span class="n">array</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">median</span><span class="p">;</span> <span class="o">...</span><span class="p">;</span><span class="k">end</span>
    <span class="k">def</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">target</span><span class="p">);</span> <span class="o">...</span><span class="p">;</span> <span class="k">end</span>
    <span class="c1">#...</span>
<span class="k">end</span>

</code></pre></div></div>
:ET